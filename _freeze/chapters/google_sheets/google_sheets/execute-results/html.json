{
  "hash": "91bc4783925fc01e231a191b410099fd",
  "result": {
    "engine": "knitr",
    "markdown": "# Google Sheets {#sec-google-sheets}\n\nThis note is all about importing and exporting data to/from Google Sheets. The primary motivation for me to create this note initially was a personal budget app I was working on. I knew that I wanted to use Shiny as a front end for that app, but I wasn't sure what to use a back end. Then, I came across an article by Dean Attali about [persistent data storage in Shiny apps](https://shiny.posit.co/r/articles/build/persistent-data-storage/) that discusses using Google Sheets as a back end for Shiny apps.\n\nSome of the nice things about using Google Sheets in this way are: - It's relatively simple and straightforward. Many people (including me) are already comfortable with Google Sheets. - There's no cost involved. - The data tables can be viewed/edited immediately in Google Sheets. You don't need to wait until you have a front end built. I'm sure there are downsides that go along with this, but it's a nice crutch for people who are new to database development.\n\nUseful websites:\n\n-   [Get started with googlesheets4](https://googlesheets4.tidyverse.org/articles/googlesheets4.html)\n\n-   [Persistent data storage in Shiny apps - Google Sheets](https://shiny.posit.co/r/articles/build/persistent-data-storage/#gsheets)\n\n-   [Dean Attali's Persistent data storage Shiny app](https://attalitech.com/#portfolio)\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr, warn.conflicts = FALSE)\nlibrary(googlesheets4, warn.conflicts = FALSE)\nlibrary(googledrive, warn.conflicts = FALSE)\n```\n:::\n\n\n## Sheet ID\n\nSave the sheet id for use below. You can pull it from the sheet's URL. For example, the sheet id for the budget app is: `1153fK76wz8cu4URFM7eidlyv8AEUoSKAAIt-q6uH0ZE`. It is taken from the budget app's url, which is: `https://docs.google.com/spreadsheets/d/1153fK76wz8cu4URFM7eidlyv8AEUoSKAAIt-q6uH0ZE/edit#gid=1694905897`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbudget_app_id <- \"1153fK76wz8cu4URFM7eidlyv8AEUoSKAAIt-q6uH0ZE\"\n```\n:::\n\n\n## View Google Sheet\n\nView the Google Sheet in the browser (optional). The code below isn't run.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_browse(budget_app_id)\n```\n:::\n\n\n## Import\n\nNow, we will import a Google Sheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentities <- read_sheet(ss = budget_app_id, sheet = \"Entities\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Using an auto-discovered, cached token.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  See gargle's \"Non-interactive auth\" vignette for more details:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  <https://gargle.r-lib.org/articles/non-interactive-auth.html>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ The googlesheets4 package is using a cached token for\n  'brad.cannell@gmail.com'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Reading from \"Budget App Prototype\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Range ''Entities''.\n```\n\n\n:::\n:::\n\n\nThe first time you run this code, you will have to authorize the package to access your Google Drive.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![The first time you run this code, you will have to authorize the package to access your Google Drive.](authorize_google.png){fig-alt='A screenshot of the R console. The prompt is asking the user if it is ok to to cache OAuth access credentials in the folder ~/Library/Caches/gargle between R sessions.'}\n:::\n:::\n\n\nNext, you will have to select the Google account you want to give the Tidyverse API Packages authorization to access. Then, you will need to make sure to click the checkbox that gives the Tidyverse API Packages authorization to \"see, edit, create, and delete all your Google Sheets spreadsheets.\"\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Click the checkbox that gives the Tidyverse API Packages authorization to \"see, edit, create, and delete all your Google Sheets spreadsheets.\"](authorize_checkbox.png){fig-alt='A screenshot of the checkbox that gives the Tidyverse API Packages authorization to \"see, edit, create, and delete all your Google Sheets spreadsheets.\"'}\n:::\n:::\n\n\n::: callout-warning\nMAKE SURE TO CLICK THE CHECKBOX. Don't just hit continue.\n:::\n\nAfter clicking the checkbox, click `Continue`. After doing so, you should be able to close the browser window and run the code without issue. If there is an issue, try restarting the R session and going through the authorization process again.\n\nAlternatively, we can use the `googledrive` package and the sheet's name to import the sheet into our R session.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentities <- drive_get(\"Budget App Prototype\") |>\n  read_sheet(\"Entities\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n! Using an auto-discovered, cached token.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  To suppress this message, modify your code or options to clearly consent to\n  the use of a cached token.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  See gargle's \"Non-interactive auth\" vignette for more details:\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n  <https://gargle.r-lib.org/articles/non-interactive-auth.html>\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nℹ The googledrive package is using a cached token for 'brad.cannell@gmail.com'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ The input `path` resolved to exactly 1 file.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Reading from \"Budget App Prototype\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Range ''Entities''.\n```\n\n\n:::\n:::\n\n\n::: callout-note\nThe first time you use the `googledrive` package, you will have to go through the authorization process described above.\n:::\n\n## Metadata\n\nIt is also possible to optionally view metadata about the sheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngs4_get(budget_app_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n── <googlesheets4_spreadsheet> ─────────────────────────────────────────────────\n Spreadsheet name: \"Budget App Prototype\"                      \n               ID: 1153fK76wz8cu4URFM7eidlyv8AEUoSKAAIt-q6uH0ZE\n           Locale: en_US                                       \n        Time zone: America/Mexico_City                         \n      # of sheets: 13                                          \n# of named ranges: 26                                          \n\n── <sheets> ────────────────────────────────────────────────────────────────────\n        (Sheet name): (Nominal extent in rows x columns)\n 'Development NOTES': 992 x 2\n'Dev Test Functions': 50507 x 26\n             'Lists': 1007 x 27\n     'Dev Bills Due': 1007 x 28\n              'Owed': 1000 x 26\n            'Income': 1000 x 26\n          'Entities': 1000 x 26\n          'Accounts': 50522 x 32\n    'PaymentPeriods': 1000 x 27\n     'InterestRates': 1000 x 27\n   'PaymentAccounts': 1000 x 27\n    'PaymentMethods': 1000 x 27\n     'USAA Checking': 1000 x 26\n\n── <named ranges> ──────────────────────────────────────────────────────────────\n                 (Named range): (A1 range)       \n          'account_categories': 'Lists'!D10:D34  \n'account_subcat_personal_care': 'Lists'!D145:D147\n   'account_pay_period_manual': 'Lists'!E10:E13  \n       'account_subcat_travel': 'Lists'!D188:D191\n               'account_types': 'Lists'!C10:C11  \n          'account_subcat_edu': 'Lists'!D55:D57  \n          'account_subcat_ent': 'Lists'!D59:D64  \n     'account_subcat_transfer': 'Lists'!D186:D186\n         'account_subcat_food': 'Lists'!D76:D80  \n        'account_subcat_bills': 'Lists'!D47:D51  \n        'account_subcat_gifts': 'Lists'!D82:D83  \n         'account_subcat_auto': 'Lists'!D38:D45  \n    'account_subcat_financial': 'Lists'!D73:D74  \n         'account_subcat_pets': 'Lists'!D164:D167\n         'account_subcat_home': 'Lists'!D94:D102 \n        'account_subcat_taxes': 'Lists'!D177:D184\n  'account_subcat_investments': 'Lists'!D104:D131\n          'account_cat_health': 'Lists'!D85:D92  \n                'entity_types': 'Lists'!B10:B15  \n       'account_subcat_income': 'Lists'!D149:D162\n     'account_subcat_shopping': 'Lists'!D169:D173\n        'account_subcat_loans': 'Lists'!D139:D143\n         'account_subcat_kids': 'Lists'!D133:D137\n         'account_subcat_fees': 'Lists'!D66:D71  \n                      'months': 'Lists'!A10:A21  \n'account_subcat_subscriptions': 'Lists'!D175:D175\n```\n\n\n:::\n:::\n\n\n## Properties\n\nIt is also possible to optionally view properties of the sheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_properties(budget_app_id)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 8\n   name               index       id type  visible grid_rows grid_columns data  \n   <chr>              <int>    <int> <chr> <lgl>       <int>        <int> <list>\n 1 Development NOTES      0   1.38e8 GRID  TRUE          992            2 <NULL>\n 2 Dev Test Functions     1   1.64e9 GRID  TRUE        50507           26 <NULL>\n 3 Lists                  2   3.79e7 GRID  TRUE         1007           27 <NULL>\n 4 Dev Bills Due          3   1.70e9 GRID  TRUE         1007           28 <NULL>\n 5 Owed                   4   6.85e8 GRID  TRUE         1000           26 <NULL>\n 6 Income                 5   9.24e8 GRID  TRUE         1000           26 <NULL>\n 7 Entities               6   1.25e8 GRID  TRUE         1000           26 <NULL>\n 8 Accounts               7   1.69e9 GRID  TRUE        50522           32 <NULL>\n 9 PaymentPeriods         8   1.37e9 GRID  TRUE         1000           27 <NULL>\n10 InterestRates          9   1.04e9 GRID  TRUE         1000           27 <NULL>\n11 PaymentAccounts       10   1.27e9 GRID  TRUE         1000           27 <NULL>\n12 PaymentMethods        11   2.40e8 GRID  TRUE         1000           27 <NULL>\n13 USAA Checking         12   7.69e7 GRID  TRUE         1000           26 <NULL>\n```\n\n\n:::\n:::\n\n\n## Add data to sheets\n\nIn the example below, we will add new data to the **entities** sheet.\n\n### Method 1: Add data locally and then write to Google Sheets\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentities_update <- entities |>\n  add_row(pk_entity = 999, entity_name = \"Test\")\n```\n:::\n\n\nNow, write the updates back to Google Sheets.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_write(entities_update, budget_app_id, sheet = \"Test\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Writing to \"Budget App Prototype\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Writing to sheet 'Test'.\n```\n\n\n:::\n:::\n\n\nIt worked. Now, delete the test sheet.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_delete(budget_app_id, \"Test\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Deleting 1 sheet from \"Budget App Prototype\":\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• 'Test'\n```\n\n\n:::\n:::\n\n\n### Method 2: Add directly to Google Sheets (almost like a database)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nentities_empty <- slice(entities, 0)\nentities_update <- entities_empty |>\n  add_row(pk_entity = 999, entity_name = \"Test\")\n```\n:::\n\n\nAppend to Google Sheet\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsheet_append(budget_app_id, entities_update, sheet = \"Entities\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Writing to \"Budget App Prototype\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Appending 1 row to 'Entities'.\n```\n\n\n:::\n:::\n\n\nIt worked! Now, delete the test row.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrange_delete(budget_app_id, sheet = \"Entities\", range = \"30\", shift = NULL)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Editing \"Budget App Prototype\".\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\n✔ Deleting cells in sheet 'Entities'.\n```\n\n\n:::\n:::\n\n\nOne thing I think I like about this method is that I can read/write data to/from R/Shiny, but I can also still easily interact with the data directly in Google Sheets.\n",
    "supporting": [
      "google_sheets_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}